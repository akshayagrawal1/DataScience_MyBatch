r1<- lm(residualVal~bs(fittedValues,8))
summary(flierresponseglm)
flierresponseglm$R
install.packages("LogisticDx")
library(LogisticDx)
install.packages("scales")
library(LogisticDx)
setwd("F:\\Users\\AnandJayaraman\\Documents\\Research\\Talks n Presentations\\Insofe\\RegressionTimeSeries\\2017-01-14\\Day3")
# LOGISTIC REGRESSION
# Read in Flier Response Data
flierresponse <- read.csv("FlierResponse.csv", header = T, sep = ",")
flierresponse
str(flierresponse)
flierresponse$Response <- as.factor(flierresponse$Response)
str(flierresponse)
flierresponseglm <- glm(Response~Age, data = flierresponse, family = "binomial")
flierresponseglm
gof(flierresponseglm)
ll<-gof(flierresponseglm)
ll$R2
ll$chiSq
ll$ct
ll$
ll$auc
plot(ll)
plot(flierresponseglm)
subscribetermdeposit <- read.csv("bank-full.csv", header = T, sep = ";")
#subscribetermdeposit
str(subscribetermdeposit)
subscribetermdepositglm <- glm(y ~ age + job + marital + education + default
+ balance + housing + loan + contact + day
+ month + duration + campaign + pdays
+ previous + poutcome, data = subscribetermdeposit,
family = "binomial")
summary(subscribetermdepositglm)
stepOut<- stepAIC(subscribetermdepositglm, direction = "both")
library(MASS)
stepOut<- stepAIC(subscribetermdepositglm, direction = "both")
car::vif(stepOut)
# Read in the Framingham dataset
framingham = read.csv("framingham.csv")
# Look at structure
str(framingham)
# Load the library caTools
library(caTools)
# Randomly split the data into training and testing sets
set.seed(1000)
split = sample.split(framingham$TenYearCHD, SplitRatio = 0.70)
# Split up the data using subset
train = subset(framingham, split==TRUE)
test = subset(framingham, split==FALSE)
# Logistic Regression Model
framinghamLog = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
View(framingham)
rowSums(is.na(framingham))
colSums(is.na(framingham))
summary(framingham$education)
mode(framingham$education)
mode(framingham$education)
?mode
?median
with(framinghan,plot(age,education))
with(framingha,plot(age,education))
with(framingham,plot(age,education))
with(framingham,plot(male,education))
with(framingham,plot(cigsPerDay,education))
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(framingham$education)
median(framingham$education)
median(framingham$education,na.rm=T)
colSums(is.na(framingham))
str(framingham)
getmode(framingham$BPMeds)
summary(framingham$BPMeds)
# A function to replace missing values with the mode
replaceNAwithMode <- function(v) {
modeval <- getmode(v)
v[is.na(v)] <- modeval
}
framingham$education <- replaceNAwithMode(framingham$education)
summary(framingham$education)
# A function to replace missing values with the mode
replaceNAwithMode <- function(v) {
modeval <- getmode(v)
v[is.na(v)] <- modeval
v
}
summary(framingham$BPMeds)
framingham$BPMeds <- replaceNAwithMode(framingham$BPMeds)
summary(framingham$BPMeds)
# A function to replace missing values with the median
replaceNAwithMedian <- function(v) {
v[is.na(v)] <- median(v,rm.na=T)
v
}
summary(framingham$cigsPerDay)
framingham$cigsPerDay <- replaceNAwithMedian(framingham$cigsPerDay)
# A function to replace missing values with the median
replaceNAwithMedian <- function(v) {
v[is.na(v)] <- median(v,na.rm=T)
v
}
framingham$cigsPerDay <- replaceNAwithMedian(framingham$cigsPerDay)
summary(framingham$cigsPerDay)
framingham$cigsPerDay <- replaceNAwithMedian(framingham$cigsPerDay)
framingham$totChol <- replaceNAwithMedian(framingham$totChol)
framingham$BMI <- replaceNAwithMedian(framingham$BMI)
framingham$heartRate <- replaceNAwithMedian(framingham$heartRate)
framingham$glucose <- replaceNAwithMedian(framingham$glucose)
colSums(is.na(framingham))
framingham = read.csv("framingham.csv")
#Lets fill all the missing categorical variables with the Mode
framingham$education <- replaceNAwithMode(framingham$education)
framingham$BPMeds <- replaceNAwithMode(framingham$BPMeds)
#Lets fill all the missing numerical variables with the Median
framingham$cigsPerDay <- replaceNAwithMedian(framingham$cigsPerDay)
framingham$totChol <- replaceNAwithMedian(framingham$totChol)
framingham$BMI <- replaceNAwithMedian(framingham$BMI)
framingham$heartRate <- replaceNAwithMedian(framingham$heartRate)
framingham$glucose <- replaceNAwithMedian(framingham$glucose)
summary(framingham$education)
framinghamLog = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
train = subset(framingham, split==TRUE)
test = subset(framingham, split==FALSE)
framinghamLog = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
summary(framingham)
summary(train$TenYearCHD)
summary(test$TenYearCHD)
predictTrain = predict(framinghamLog, type="response", newdata=train)
table(train$TenYearCHD, predictTrain > 0.5)
t1 <- table(train$TenYearCHD, predictTrain > 0.5)
sum(t1)
(t1[1,1]+t1[2,2])/sum(t1)
predictTest = predict(framinghamLog, type="response", newdata=test)
# Confusion matrix with threshold of 0.5
table(test$TenYearCHD, predictTest > 0.5)
t2<-table(test$TenYearCHD, predictTest > 0.5)
# Accuracy on Test Set
(t2[1,1]+t2[2,2])/sum(t2)
framinghamLog <- stepAIC(framinghamFull)
framinghamFull <- framinghamLog
framinghamLog <- stepAIC(framinghamFull)
#Accuracy on the training set
predictTrain = predict(framinghamLog, type="response", newdata=train)
# Confusion matrix with threshold of 0.5
table(train$TenYearCHD, predictTrain > 0.5)
t1 <- table(train$TenYearCHD, predictTrain > 0.5)
# Accuracy on Train Set
(t1[1,1]+t1[2,2])/sum(t1)
# Predictions on the test set
predictTest = predict(framinghamLog, type="response", newdata=test)
# Confusion matrix with threshold of 0.5
table(test$TenYearCHD, predictTest > 0.5)
t2<-table(test$TenYearCHD, predictTest > 0.5)
# Accuracy on Test Set
(t2[1,1]+t2[2,2])/sum(t2)
sum(test$TenYearCHD)
t2[2,2]/(t2[2,1] + t2[2,2])
for (p in seq(0.2,0.8,0.05)) {
t1 <- table(train$TenYearCHD, predictTrain > p)
TPR <- t1[2,2]/(t1[2,1] + t1[2,2])
print(p, TPR)
}
TPR
#Is there a different threshold that will maximize the True Positive Rate
for (p in seq(0.2,0.8,0.05)) {
t1 <- table(train$TenYearCHD, predictTrain > p)
TPR <- t1[2,2]/(t1[2,1] + t1[2,2])
print(cat(p, TPR)
}
print(cat(p, TPR))
print(paste(p, TPR,sep=","))
cat(p, TPR,"\n")
for (p in seq(0.2,0.8,0.05)) {
t1 <- table(train$TenYearCHD, predictTrain > p)
TPR <- t1[2,2]/(t1[2,1] + t1[2,2])
cat(p, TPR,"\n")
}
kappa(framinghamlog)
kappa(framinghamLog)
diag(t1)/sum(t1)
totalAcc <- sum(diag(t1))/sum(t1)
totalAcc
t1
sum(train$TenYearCHD)/length(train$TenYearCHD)
ActualTruPerc<- sum(train$TenYearCHD)/length(train$TenYearCHD)
ActualFalPerc<- 1 - ActualTruPerc
PredTrue <- sum(predictTrain > p)/length(predictTrain)
PredFalse <- 1-PredTrue
for (p in seq(0.2,0.8,0.05)) {
t1 <- table(train$TenYearCHD, predictTrain > p)
totalAcc <- sum(diag(t1))/sum(t1)
ActualTruPerc<- sum(train$TenYearCHD)/length(train$TenYearCHD)
ActualFalPerc<- 1 - ActualTruPerc
PredTrue <- sum(predictTrain > p)/length(predictTrain)
PredFalse <- 1-PredTrue
RandomAcc <- ActualTruPerc*PredTrue + ActualFalPerc*PredFalse
Kappa <- (totalAcc-RandomAcc)/(1-RandomAcc)
cat(p, Kappa,"\n")
}
for (p in seq(0.2,0.8,0.05)) {
t1 <- table(train$TenYearCHD, predictTrain > p)
totalAcc <- sum(diag(t1))/sum(t1)
ActualTruPerc<- sum(train$TenYearCHD)/length(train$TenYearCHD)
ActualFalPerc<- 1 - ActualTruPerc
PredTrue <- sum(predictTrain > p)/length(predictTrain)
PredFalse <- 1-PredTrue
RandomAcc <- ActualTruPerc*PredTrue + ActualFalPerc*PredFalse
Kappa <- (totalAcc-RandomAcc)/(1-RandomAcc)
cat(p, Kappa,totalAcc, "\n")
}
1500/5000
summary(framinghamlog)
summary(framinghamLog)
plot(framinghamLog,which=1)
detach("LogisticDx")
detach("package:LogisticDx")
plot(framinghamLog,which=1)
detach("package:LogisticDx",unload=T)
detach("package:LogisticDx",unload=TRUE)
plot(framinghamLog,which=1)
plot(framinghamLog)
lowRisk <- which(framingham$age < 40)
medRisk <- which(framingham$age >= 40 & framingham$age < 50)
highRisk <- which(framingham$age >= 50)
framingham[lowRisk,"age"] <- "1"
framingham[medRisk,"age"] <- "2"
framingham[highRisk, "age"] <- "3"
framingham$age <- as.factor(framingham$age)
framinghamLog1 <-framinghamLog
framinghamFull = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamFull)
framinghamLog <- stepAIC(framinghamFull)
summary(framinghamLog)
train = subset(framingham, split==TRUE)
test = subset(framingham, split==FALSE)
framinghamFull = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamFull)
framinghamLog <- stepAIC(framinghamFull)
summary(framinghamLog)
summary()
summary(framinghamLog1)
1-2243/2529
1-2260/2529
a=0.99312
b=0.985766
a*a-b
sqrt(a*a-b)
sqrt(a*a-b*b)
sqrt(a*a-b)
plot(framinghamLog1)
graphics.off()
setwd("F:\\Users\\AnandJayaraman\\Documents\\Research\\Talks n Presentations\\Insofe\\RegressionTimeSeries\\2017-01-14\\Day3")
flierresponse <- read.csv("FlierResponse.csv", header = T, sep = ",")
flierresponse
str(flierresponse)
flierresponse$Response <- as.factor(flierresponse$Response)
str(flierresponse)
flierresponseglm <- glm(Response~Age, data = flierresponse, family = "binomial")
flierresponseglm
summary(flierresponseglm)
par(mfrow=c(2,2))
plot(flierresponseglm)
fittedValues <- flierresponseglm$fitted.values
residualVal <- flierresponseglm$residuals
ActualResponse <- as.numeric(flierresponse$Response)
par(mfrow=c(1,1))
plot(fittedValues,residualVal,col=c("blue","red")[ActualResponse])
abline(h=0,lty=2,col="grey")
lines(lowess(fittedValues,residualVal),col="black",lwd=2)
library(MASS)
library(ggplot2)
head(fittedValues)
head(residualVal)
head(ActualResponse)
head(flierresponse)
tail(flierresponse)
tail(ActualResponse)
tail(residualVal)
subscribetermdeposit <- read.csv("bank-full.csv", header = T, sep = ";")
#subscribetermdeposit
str(subscribetermdeposit)
subscribetermdepositglm <- glm(y ~ age + job + marital + education + default
+ balance + housing + loan + contact + day
+ month + duration + campaign + pdays
+ previous + poutcome, data = subscribetermdeposit,
family = "binomial")
subscribetermdepositglm
predict(subscribetermdepositglm,newdata=Test)
summary(subscribetermdepositglm)
stepOut<- stepAIC(subscribetermdepositglm, direction = "both")
car::vif(stepOut)
car::vif(subscribetermdepositglm)
?vif
str(subscribetermdeposit)
plogit
plogit()
plot(Age,fittedValues)
plot(flierresponse$Age,fittedValues)
plot(flierresponse$Age,ActualResponse)
x=1:length(fittedValues)
y=round(fittedValues)
plot(x,y)
y=sort(round(fittedValues))
plot(x,y)
y[50:60]
x= c(1:10,15:25)
x
y=c(rep(0,10),rep(1,10))
y
length(y)
x= c(1:10,16:25)
length(x)
plot(x,y)
testfit <- glm(y~x,family = "binomial")
testfit
x= c(1:10,11:20)
testfit <- glm(y~x,family = "binomial")
testfit
y<- factor(y)
testfit <- glm(y~x,family = "binomial")
testfit
x= c(1:10,10:19)
testfit <- glm(y~x,family = "binomial")
testfit
1 - 2.773/27.73
plot(x,y)
abline(x,testfit$fitted.values)
lines(x,testfit$fitted.values)
plot(x,y)
lines(lowess(x,testfit$fitted.values))
x11()
lines(lowess(x,testfit$fitted.values))
plot(x,y)
lines(lowess(x,testfit$fitted.values))
plot(x,y-1)
plot(x,as.numeric(y))
plot(x,as.numeric(y)-1)
lines(lowess(x,testfit$fitted.values))
testfit$fitted.values
lowess()
?lowess
plot(x,as.numeric(y)-1)
lines(lowess(x,testfit$fitted.values,f=0.2))
lines(lowess(x,testfit$fitted.values,f=0.))
lines(lowess(x,testfit$fitted.values,f=0.4))
lines(lowess(x,testfit$fitted.values,f=1))
lines(lowess(x,testfit$fitted.values,f=0.5))
predict(flierresponseglm,newdata=50)
predict(flierresponseglm,newdata=Age=50)
nd <- data.frame(Age=50)
predict(flierresponseglm,newdata=nd)
predict(flierresponseglm,newdata=nd,type="response")
flierresponseglm <- glm(Response~Age, data = flierresponse, family = "binomial")
nd <- data.frame(Age=50)  #To predict the probability for Age=50, put that info in a data-frame
predict(flierresponseglm,newdata=nd)  # This gives the log-Odds
predict(flierresponseglm,newdata=nd,type="response")  # Compute the probability
#test
rm(list=ls(all=TRUE))
setwd("F:\\Users\\AnandJayaraman\\Documents\\Research\\Talks n Presentations\\Insofe\\RegressionTimeSeries\\2017-02-25\\Day4")
library("forecast")
library("stats")
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
births
birthstimeseries <- ts(births,
frequency=12,
start=c(1946,1))
birthstimeseries
plot(birthstimeseries)
par(mfrow=c(1,1))
births <- data.frame(births)
births$time <- seq(1:168)
edit(births)
~~
rm(list=ls(all=TRUE))
setwd("F:\\Users\\AnandJayaraman\\Documents\\Research\\Talks n Presentations\\Insofe\\RegressionTimeSeries\\2017-02-25\\Day4")
library("forecast")
library("stats")
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
births
birthstimeseries <- ts(births,
frequency=12,
start=c(1946,1))
birthstimeseries
plot(birthstimeseries)
par(mfrow=c(1,1))
births <- data.frame(births)
births$time <- seq(1:168)
View(births)
plot(births$births, type="l")
lm1 <- lm(births$births ~ births$time)
lm2 <- lm(births$births ~
poly(births$time, 2, raw=TRUE))
lm3 <- lm(births$births ~
poly(births$time, 3, raw=TRUE))
points(births$time, predict(lm1),
type="l", col="red", lwd=2)
points(births$time, predict(lm2),
type="l", col="green", lwd=2)
points(births$time, predict(lm3),
type="l", col="blue", lwd=2)
births$seasonal <- as.factor(rep(c(1:12),14))
View(births)
lm1s <- lm(births ~ ., data=births)
lm2s <- lm(births ~ poly(time, 2, raw=TRUE)+
seasonal, data=births)
lm3s <- lm(births ~ poly(time, 3, raw=TRUE)+
seasonal, data=births)
plot(births$births, type="l")
points(births$time, predict(lm1s),
type="l", col="red", lwd=2)
points(births$time, predict(lm2s),
type="l", col="blue", lwd=2)
plot(births$births, type="l")
points(births$time, predict(lm3s),
type="l", col="green", lwd=2)
births$mae <- births$births/predict(lm1)
View(births)
head(births)
seasonal <- tapply(births$mae,
births$seasonal, mean)
seasonal
birthspr <- predict(lm1)*rep(seasonal,14)
plot(births$births, type="l")
points(births$time, birthspr,
type="l", col="red", lwd=2)
births$mae <- births$births-predict(lm1)
View(births)
par(mfrow=c(1,1))
births <- data.frame(births)
births$time <- seq(1:168)
View(births)
plot(births$births, type="l")
lm1 <- lm(births$births ~ births$time)
lm2 <- lm(births$births ~
poly(births$time, 2, raw=TRUE))
lm3 <- lm(births$births ~
poly(births$time, 3, raw=TRUE))
points(births$time, predict(lm1),
type="l", col="red", lwd=2)
births$SeasonalFactor <- births$births/predict(lm1)
View(births)
seasonalAdustFactor <- tapply(births$SeasonalFactor,
births$seasonal, mean)
seasonalAdustFactor
birthspr <- predict(lm1)*rep(seasonalAdustFactor,14)
plot(births$births, type="l")
points(births$time, birthspr,
type="l", col="red", lwd=2)
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
plot(births$births, type="l")
lm1 <- lm(births$births ~ births$time)   #Linear Fit with time
lm2 <- lm(births$births ~
poly(births$time, 2, raw=TRUE)) #Quadratic Fit with time
lm3 <- lm(births$births ~
poly(births$time, 3, raw=TRUE)) #Cubic Fit with time
points(births$time, predict(lm1),
type="l", col="red", lwd=2)  #plot Linear Fit
points(births$time, predict(lm2),
type="l", col="green", lwd=2)   #plot Quadratic Fit
points(births$time, predict(lm3),
type="l", col="blue", lwd=2)   #plot Cubic Fit
births <- data.frame(births)
births$time <- seq(1:168)
View(births)
plot(births$births, type="l")
lm1 <- lm(births$births ~ births$time)   #Linear Fit with time
lm2 <- lm(births$births ~
poly(births$time, 2, raw=TRUE)) #Quadratic Fit with time
lm3 <- lm(births$births ~
poly(births$time, 3, raw=TRUE)) #Cubic Fit with time
births$seasonal <- as.factor(rep(c(1:12),14))
births$SeasonalFactor <- births$births/predict(lm1)
View(births)
births$SeasonalFactor <- births$births/predict(lm1)
seasonalAdustFactor <- tapply(births$SeasonalFactor,
births$seasonal, mean)
birthspr <- predict(lm1)*rep(seasonalAdustFactor,14)
plot(births$births, type="l")
points(births$time, birthspr,   type="l", col="red", lwd=2)
births$mae <- births$births-predict(lm1)
seasonalAdd <- tapply(births$mae,
births$seasonal, mean)
birthspr <- predict(lm1)+rep(seasonalAdd,14)
plot(births$births, type="l")
points(births$time, birthspr, type="l", col="green", lwd=2)
birthstimeseries <-
auto.arima(birthstimeseries, ic='aic')
birthstimeseries
birthstimeseriesforecasts <-
forecast.Arima(birthstimeseries,  h=5)
plot.forecast(birthstimeseriesforecasts)
plot(birthstimeseries)
birthstimeseries <- ts(births,
frequency=12,
start=c(1946,1))
birthsArima <-
auto.arima(birthstimeseries, ic='aic')
auto.arima(birthstimeseries)
plot(birthstimeseries)
birthstimeseriesdiff1 <-  diff(birthstimeseries, differences=1)
plot.ts(birthstimeseriesdiff1)
birthstimeseriesdiff2 <-  diff(birthstimeseries, differences=2)
plot.ts(birthstimeseriesdiff2)
auto.arima(birthstimeseries)
